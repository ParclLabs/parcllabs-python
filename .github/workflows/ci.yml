name: Python Package Release Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'  # Specify the Python version here

      - name: Install Pipenv
        run: python -m pip install --upgrade pip && pip install pipenv

      - name: Install dependencies
        run: |
          pipenv install --dev  # Install all dependencies including dev dependencies

      - name: Run tests
        run: pipenv run make test  # Use makefile to run tests (assumes 'make test' is setup to run pytest)

      - name: Run Lint
        run: pipenv run make lint  # Use makefile to run lint (assumes 'make lint' is setup)

      - name: Extract version from parcllabs/__version__.py
        id: get_version
        run: |
          VERSION_LINE=$(grep 'VERSION' parcllabs/__version__.py)
          VERSION=$(echo $VERSION_LINE | cut -d '"' -f 2)
          echo "Extracted version: $VERSION"
          echo "name=VERSION::$VERSION" >> $GITHUB_OUTPUT


      - name: Tag Repository
        uses: actions/github-script@v5
        if: github.event_name == 'push'  # Only tag on push events to main
        with:
          script: |
            const tagName = '${{ steps.get_version.outputs.VERSION }}';
            const ref = 'refs/tags/' + tagName;
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: ref,
              sha: context.sha
            });

      - name: Build Package
        if: github.event_name == 'push'
        run: |
          python setup.py clean --all sdist bdist_wheel --universal

      - name: Check package
        if: github.event_name == 'push'
        run: |
          python -m twine check dist/*

      - name: Upload to TestPyPI
        if: github.event_name == 'push'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TEST_API_KEY }}
        run: |
          twine upload --repository testpypi dist/*
